# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_example_controllers/DSM.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DSM(genpy.Message):
  _md5sum = "74b11dcf8f67a9d16cde99a0f780649d"
  _type = "franka_example_controllers/DSM"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time_DSM
float64 duration_DSM
float64 duration_DSM_tau
float64 duration_DSM_dotq
float64 duration_DSM_q
float64 duration_DSM_dotp_EE
float64 duration_DSM_sphere
float64 duration_DSM_cylinder
float64 duration_DSM_wall
float64 DSM
float64 DSM_tau
float64 DSM_dotq
float64 DSM_q
float64 DSM_dotp_EE
float64 DSM_sphere
float64 DSM_cylinder
float64 DSM_wall"""
  __slots__ = ['time_DSM','duration_DSM','duration_DSM_tau','duration_DSM_dotq','duration_DSM_q','duration_DSM_dotp_EE','duration_DSM_sphere','duration_DSM_cylinder','duration_DSM_wall','DSM','DSM_tau','DSM_dotq','DSM_q','DSM_dotp_EE','DSM_sphere','DSM_cylinder','DSM_wall']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_DSM,duration_DSM,duration_DSM_tau,duration_DSM_dotq,duration_DSM_q,duration_DSM_dotp_EE,duration_DSM_sphere,duration_DSM_cylinder,duration_DSM_wall,DSM,DSM_tau,DSM_dotq,DSM_q,DSM_dotp_EE,DSM_sphere,DSM_cylinder,DSM_wall

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DSM, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_DSM is None:
        self.time_DSM = 0.
      if self.duration_DSM is None:
        self.duration_DSM = 0.
      if self.duration_DSM_tau is None:
        self.duration_DSM_tau = 0.
      if self.duration_DSM_dotq is None:
        self.duration_DSM_dotq = 0.
      if self.duration_DSM_q is None:
        self.duration_DSM_q = 0.
      if self.duration_DSM_dotp_EE is None:
        self.duration_DSM_dotp_EE = 0.
      if self.duration_DSM_sphere is None:
        self.duration_DSM_sphere = 0.
      if self.duration_DSM_cylinder is None:
        self.duration_DSM_cylinder = 0.
      if self.duration_DSM_wall is None:
        self.duration_DSM_wall = 0.
      if self.DSM is None:
        self.DSM = 0.
      if self.DSM_tau is None:
        self.DSM_tau = 0.
      if self.DSM_dotq is None:
        self.DSM_dotq = 0.
      if self.DSM_q is None:
        self.DSM_q = 0.
      if self.DSM_dotp_EE is None:
        self.DSM_dotp_EE = 0.
      if self.DSM_sphere is None:
        self.DSM_sphere = 0.
      if self.DSM_cylinder is None:
        self.DSM_cylinder = 0.
      if self.DSM_wall is None:
        self.DSM_wall = 0.
    else:
      self.time_DSM = 0.
      self.duration_DSM = 0.
      self.duration_DSM_tau = 0.
      self.duration_DSM_dotq = 0.
      self.duration_DSM_q = 0.
      self.duration_DSM_dotp_EE = 0.
      self.duration_DSM_sphere = 0.
      self.duration_DSM_cylinder = 0.
      self.duration_DSM_wall = 0.
      self.DSM = 0.
      self.DSM_tau = 0.
      self.DSM_dotq = 0.
      self.DSM_q = 0.
      self.DSM_dotp_EE = 0.
      self.DSM_sphere = 0.
      self.DSM_cylinder = 0.
      self.DSM_wall = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.time_DSM, _x.duration_DSM, _x.duration_DSM_tau, _x.duration_DSM_dotq, _x.duration_DSM_q, _x.duration_DSM_dotp_EE, _x.duration_DSM_sphere, _x.duration_DSM_cylinder, _x.duration_DSM_wall, _x.DSM, _x.DSM_tau, _x.DSM_dotq, _x.DSM_q, _x.DSM_dotp_EE, _x.DSM_sphere, _x.DSM_cylinder, _x.DSM_wall))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.time_DSM, _x.duration_DSM, _x.duration_DSM_tau, _x.duration_DSM_dotq, _x.duration_DSM_q, _x.duration_DSM_dotp_EE, _x.duration_DSM_sphere, _x.duration_DSM_cylinder, _x.duration_DSM_wall, _x.DSM, _x.DSM_tau, _x.DSM_dotq, _x.DSM_q, _x.DSM_dotp_EE, _x.DSM_sphere, _x.DSM_cylinder, _x.DSM_wall,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17d().pack(_x.time_DSM, _x.duration_DSM, _x.duration_DSM_tau, _x.duration_DSM_dotq, _x.duration_DSM_q, _x.duration_DSM_dotp_EE, _x.duration_DSM_sphere, _x.duration_DSM_cylinder, _x.duration_DSM_wall, _x.DSM, _x.DSM_tau, _x.DSM_dotq, _x.DSM_q, _x.DSM_dotp_EE, _x.DSM_sphere, _x.DSM_cylinder, _x.DSM_wall))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.time_DSM, _x.duration_DSM, _x.duration_DSM_tau, _x.duration_DSM_dotq, _x.duration_DSM_q, _x.duration_DSM_dotp_EE, _x.duration_DSM_sphere, _x.duration_DSM_cylinder, _x.duration_DSM_wall, _x.DSM, _x.DSM_tau, _x.DSM_dotq, _x.DSM_q, _x.DSM_dotp_EE, _x.DSM_sphere, _x.DSM_cylinder, _x.DSM_wall,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
