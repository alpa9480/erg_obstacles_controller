// Generated by gencpp from file franka_example_controllers/DSM.msg
// DO NOT EDIT!


#ifndef FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_DSM_H
#define FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_DSM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_example_controllers
{
template <class ContainerAllocator>
struct DSM_
{
  typedef DSM_<ContainerAllocator> Type;

  DSM_()
    : time_DSM(0.0)
    , duration_DSM(0.0)
    , duration_DSM_tau(0.0)
    , duration_DSM_dotq(0.0)
    , duration_DSM_q(0.0)
    , duration_DSM_dotp_EE(0.0)
    , duration_DSM_sphere(0.0)
    , duration_DSM_cylinder(0.0)
    , duration_DSM_wall(0.0)
    , DSM(0.0)
    , DSM_tau(0.0)
    , DSM_dotq(0.0)
    , DSM_q(0.0)
    , DSM_dotp_EE(0.0)
    , DSM_sphere(0.0)
    , DSM_cylinder(0.0)
    , DSM_wall(0.0)  {
    }
  DSM_(const ContainerAllocator& _alloc)
    : time_DSM(0.0)
    , duration_DSM(0.0)
    , duration_DSM_tau(0.0)
    , duration_DSM_dotq(0.0)
    , duration_DSM_q(0.0)
    , duration_DSM_dotp_EE(0.0)
    , duration_DSM_sphere(0.0)
    , duration_DSM_cylinder(0.0)
    , duration_DSM_wall(0.0)
    , DSM(0.0)
    , DSM_tau(0.0)
    , DSM_dotq(0.0)
    , DSM_q(0.0)
    , DSM_dotp_EE(0.0)
    , DSM_sphere(0.0)
    , DSM_cylinder(0.0)
    , DSM_wall(0.0)  {
  (void)_alloc;
    }



   typedef double _time_DSM_type;
  _time_DSM_type time_DSM;

   typedef double _duration_DSM_type;
  _duration_DSM_type duration_DSM;

   typedef double _duration_DSM_tau_type;
  _duration_DSM_tau_type duration_DSM_tau;

   typedef double _duration_DSM_dotq_type;
  _duration_DSM_dotq_type duration_DSM_dotq;

   typedef double _duration_DSM_q_type;
  _duration_DSM_q_type duration_DSM_q;

   typedef double _duration_DSM_dotp_EE_type;
  _duration_DSM_dotp_EE_type duration_DSM_dotp_EE;

   typedef double _duration_DSM_sphere_type;
  _duration_DSM_sphere_type duration_DSM_sphere;

   typedef double _duration_DSM_cylinder_type;
  _duration_DSM_cylinder_type duration_DSM_cylinder;

   typedef double _duration_DSM_wall_type;
  _duration_DSM_wall_type duration_DSM_wall;

   typedef double _DSM_type;
  _DSM_type DSM;

   typedef double _DSM_tau_type;
  _DSM_tau_type DSM_tau;

   typedef double _DSM_dotq_type;
  _DSM_dotq_type DSM_dotq;

   typedef double _DSM_q_type;
  _DSM_q_type DSM_q;

   typedef double _DSM_dotp_EE_type;
  _DSM_dotp_EE_type DSM_dotp_EE;

   typedef double _DSM_sphere_type;
  _DSM_sphere_type DSM_sphere;

   typedef double _DSM_cylinder_type;
  _DSM_cylinder_type DSM_cylinder;

   typedef double _DSM_wall_type;
  _DSM_wall_type DSM_wall;





  typedef boost::shared_ptr< ::franka_example_controllers::DSM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_example_controllers::DSM_<ContainerAllocator> const> ConstPtr;

}; // struct DSM_

typedef ::franka_example_controllers::DSM_<std::allocator<void> > DSM;

typedef boost::shared_ptr< ::franka_example_controllers::DSM > DSMPtr;
typedef boost::shared_ptr< ::franka_example_controllers::DSM const> DSMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_example_controllers::DSM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_example_controllers::DSM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_example_controllers::DSM_<ContainerAllocator1> & lhs, const ::franka_example_controllers::DSM_<ContainerAllocator2> & rhs)
{
  return lhs.time_DSM == rhs.time_DSM &&
    lhs.duration_DSM == rhs.duration_DSM &&
    lhs.duration_DSM_tau == rhs.duration_DSM_tau &&
    lhs.duration_DSM_dotq == rhs.duration_DSM_dotq &&
    lhs.duration_DSM_q == rhs.duration_DSM_q &&
    lhs.duration_DSM_dotp_EE == rhs.duration_DSM_dotp_EE &&
    lhs.duration_DSM_sphere == rhs.duration_DSM_sphere &&
    lhs.duration_DSM_cylinder == rhs.duration_DSM_cylinder &&
    lhs.duration_DSM_wall == rhs.duration_DSM_wall &&
    lhs.DSM == rhs.DSM &&
    lhs.DSM_tau == rhs.DSM_tau &&
    lhs.DSM_dotq == rhs.DSM_dotq &&
    lhs.DSM_q == rhs.DSM_q &&
    lhs.DSM_dotp_EE == rhs.DSM_dotp_EE &&
    lhs.DSM_sphere == rhs.DSM_sphere &&
    lhs.DSM_cylinder == rhs.DSM_cylinder &&
    lhs.DSM_wall == rhs.DSM_wall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_example_controllers::DSM_<ContainerAllocator1> & lhs, const ::franka_example_controllers::DSM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_example_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::DSM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::DSM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::DSM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::DSM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::DSM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::DSM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_example_controllers::DSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74b11dcf8f67a9d16cde99a0f780649d";
  }

  static const char* value(const ::franka_example_controllers::DSM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74b11dcf8f67a9d1ULL;
  static const uint64_t static_value2 = 0x6cde99a0f780649dULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_example_controllers::DSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_example_controllers/DSM";
  }

  static const char* value(const ::franka_example_controllers::DSM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_example_controllers::DSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time_DSM\n"
"float64 duration_DSM\n"
"float64 duration_DSM_tau\n"
"float64 duration_DSM_dotq\n"
"float64 duration_DSM_q\n"
"float64 duration_DSM_dotp_EE\n"
"float64 duration_DSM_sphere\n"
"float64 duration_DSM_cylinder\n"
"float64 duration_DSM_wall\n"
"float64 DSM\n"
"float64 DSM_tau\n"
"float64 DSM_dotq\n"
"float64 DSM_q\n"
"float64 DSM_dotp_EE\n"
"float64 DSM_sphere\n"
"float64 DSM_cylinder\n"
"float64 DSM_wall\n"
;
  }

  static const char* value(const ::franka_example_controllers::DSM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_example_controllers::DSM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_DSM);
      stream.next(m.duration_DSM);
      stream.next(m.duration_DSM_tau);
      stream.next(m.duration_DSM_dotq);
      stream.next(m.duration_DSM_q);
      stream.next(m.duration_DSM_dotp_EE);
      stream.next(m.duration_DSM_sphere);
      stream.next(m.duration_DSM_cylinder);
      stream.next(m.duration_DSM_wall);
      stream.next(m.DSM);
      stream.next(m.DSM_tau);
      stream.next(m.DSM_dotq);
      stream.next(m.DSM_q);
      stream.next(m.DSM_dotp_EE);
      stream.next(m.DSM_sphere);
      stream.next(m.DSM_cylinder);
      stream.next(m.DSM_wall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DSM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_example_controllers::DSM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_example_controllers::DSM_<ContainerAllocator>& v)
  {
    s << indent << "time_DSM: ";
    Printer<double>::stream(s, indent + "  ", v.time_DSM);
    s << indent << "duration_DSM: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM);
    s << indent << "duration_DSM_tau: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_tau);
    s << indent << "duration_DSM_dotq: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_dotq);
    s << indent << "duration_DSM_q: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_q);
    s << indent << "duration_DSM_dotp_EE: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_dotp_EE);
    s << indent << "duration_DSM_sphere: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_sphere);
    s << indent << "duration_DSM_cylinder: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_cylinder);
    s << indent << "duration_DSM_wall: ";
    Printer<double>::stream(s, indent + "  ", v.duration_DSM_wall);
    s << indent << "DSM: ";
    Printer<double>::stream(s, indent + "  ", v.DSM);
    s << indent << "DSM_tau: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_tau);
    s << indent << "DSM_dotq: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_dotq);
    s << indent << "DSM_q: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_q);
    s << indent << "DSM_dotp_EE: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_dotp_EE);
    s << indent << "DSM_sphere: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_sphere);
    s << indent << "DSM_cylinder: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_cylinder);
    s << indent << "DSM_wall: ";
    Printer<double>::stream(s, indent + "  ", v.DSM_wall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_DSM_H
